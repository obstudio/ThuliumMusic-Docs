# 音符 ((Note))

- 一个音符有音高、时值、强度三个属性。一般使用音高记号 + 操作符的方式来表示一个音符。
- 基本音高记号为数字`1`到`7`，意义与简谱相同，分别代表唱名 do, re, mi, fa, sol, la, si。
- 除了基本音高记号以外，我们还允许用`0`表示休止符，用`x`表示打击乐，以及另一些高级记号。
- 我们使用方括号表示和弦，方括号内书写音高记号，表示将这些音高同时播放。
- 操作符写在音高或和弦之后，并且应该按[#音高操作符]、[#强度操作符]、[#时值操作符]的顺序书写。
- 每一类操作符的内部可以进行多次叠加或者交换，而不同类的操作符的顺序是不能改变的。

## 音高记号 ((Pitch Notation))

基本音高记号的思想与简谱一致，用`1`到`7`表示七个唱名。同时我们也沿用了简谱中用`0`表示休止符和用`x`表示打击乐符的做法。在本章的最后，我们还会介绍一些音高记号的高级用法，如[#跟踪记号]以及[#宏定义音高]。所有这些音高记号，在操作符的使用上是完全统一的。

### 基本范例

用基本音高组成一段旋律。注意到基本音高是唱名，因而会受到调性的影响：
```
(1=C) 1155665
(1=E) 1155665
```

使用打击乐符和休止符来实现一段简单的节奏：
```
<BassDrum> xx00xx00
```

## 音高操作符 ((Pitch Operator))

音高操作符写在一个音符（或和弦）的后方，用于改变其音高。基础的音高操作符包括`'`, `,`, `#`, `b`四个。其中：
- `'`将一个音升高一个八度，`,`将一个音降低一个八度。
- `#`将一个音升高一个半音，`b`将一个音降低一个半音。

可以看得出来，这些记号也是对五线谱和简谱记号的模仿。

>r `#`和`b`在五线谱和简谱中是写在音符的前面的，而在书写音符时你应该把它们写在音高的后面。

和弦操作符是音高操作符的一个变种，它支持将一个或多个音高映射到另一些音高上。使用时应将和弦操作符写在上述四个音高操作符的右侧。Ammonia 包中内置的和弦操作符包含了以下的一些常见三和弦：

=		=			=
*操作符	和弦名称		每个音与根音相差的半音数
M		大三和弦		0, 4, 7
m		小三和弦		0, 3, 7
a		增三和弦		0, 4, 8
d		减三和弦		0, 3, 6
o		纯八度		0, 12
u		向下八度		-12, 0

事实上，官方包中提供了更多丰富的和弦操作符，而和弦操作符能做到的也远不止这些。但限于篇幅我们只介绍到这里，感兴趣的话可以查看[和弦操作符|Chord]。

与音高相关的函数还有 [../Ammonia/Key], [../Ammonia/Oct] 等等。如果想要更深入地了解一个音符的音高，可以查看[Mechanism#音高机制]。

### 基本范例

将一个 A 大调下的音阶用 C 大调表示：
```
(1=A) 12345671'
(1=C) 6,7,1#234#5#6
```

## 强度操作符 ((Intensity Operator))

强度操作符用于改变音符的音量。强度操作符共有两个，分别是`>`和`:`，其中：
- `>`将音符增强为原来的 x 倍，`:`将音符减弱为原来的 y 倍。
- 上述 x 的默认值为 2，可以通过 [../Ammonia/Accent] 函数进行更改。
- 上述 y 的默认值为 1/2，可以通过 [../Ammonia/Light] 函数进行更改。

与音量相关的函数还有 [../Ammonia/Vol] 等等。如果想要更深入地了解一个音符的音量，可以查看[Mechanism#音量机制]。

### 基本范例

通过`:`实现类似回声的效果：
```
Light(2/3) 33:33:33:33:
```

## 时值操作符 ((Duration Operator))

时值操作符用于改变音符的拍数。与简谱一样，这个拍数的默认值为 1，并可以通过这些符号进行延长和缩短。时值操作符包括`-`, `_`, `=`, `.`四个，其中：
- `-`将当前拍数延长一拍。
- `_`将当前拍数缩短一半。
- `=`是两个`_`的简写，即代表将当前拍数变为原来的 1/4。
- `.`是附点符号。单个的附点符号会将音符拍数变为原来的 1.5 倍，两个附点符号（即双附点）会将音符时值变为原来的 1.75 倍，以此类推。一般说来，连续的 n 个附点符号（即 n 附点）将音符时值变为原来的 2-2^(-n) 倍。

>g 不同的时值操作符交换顺序可能带来不同的结果。因此为了避免混乱，我们推荐采取“**先加再半最后乘**”的做法，即将`-`操作符写在前面，`_`和`=`写在其后，`.`写在最后。同时建议当表示比较复杂的时值时，使用[Tie]来实现而不是用大量叠加时值操作符。

与时值相关的函数还有 [../Ammonia/Dur], [../Ammonia/Spd] 等等。如果想要更深入地了解一个音符的时值，可以查看[Mechanism#时值机制]。

### 基本范例

> 到目前为止音符的各要素已经基本完整，此时为了使得乐谱结构更加明晰，我们会在音符之间添加[BarLine]。如果对乐谱的可读性有着进一步的要求，还可以在音符间打上适当的空格以体现拍数。

用时值操作符表示古巴颂乐的基本节奏：
```
(120) 0xx0|x.x.x|0xx0|x.x.x|
```

结合使用时值操作符和连音线完成一段音乐：
```
(9/8) 5,.^5,6,_5,6,_|1.^12_12_|
```

## 和弦记号 ((Chord Notation))

和弦记号用`[]`表示，其中依次写入要播放的每一个音的音高，即可实现让这些音同时播放。事实上，在和弦记号中我们依旧允许音高操作符和强度操作符。它们会被直接分配到对应的音符上。而在和弦记号外使用的音高操作符和强度操作符则会对和弦内的所有音生效。

>g 一般为了阅读方便，我们建议按**从低到高**的顺序书写和弦记号内的音。但在一些[特殊情况|../Ammonia/Arpeggio]下，你或许也要用到不按顺序的写法。

如果要实现不同音的同时播放，除了和弦记号外，还可以采取[多音轨|Section]，[BarLine#并行播放]等方法。

### 基本范例

一个小三和弦以及它的等价表示：
```
[4#,6,1#]-
[46b1']#,-
```

## 顿音操作符 ((Staccato Operator))

顿音操作符用` ``表示。顿音将在不改变当前音所占时长的前提下缩短其时值，相当于缩短后自动在后面补上相应的休止。顿音缩短的部分占原长度的比例为 r，它可以由 [../Ammonia/Stac] 函数进行更改。

我们允许顿音的记号连续出现多次，表示不同模式的顿音。而 [../Ammonia/Stac] 函数也允许第二个变量 k，即要改变的顿音的序号 k。默认情况下 k 的值为 1。

- 顿音模式 1 的 r 值默认为 1/2，其他默认为 0。
- 顿音的效果会被其后的连音线取消，也能被顿音两侧的踏板影响。

### 基本范例

用顿音操作符实现跳音的效果。
```
1122332-
1`1`2`2`3`3`2-
```

利用 [../Ammonia/Stac] 函数修改默认的顿音长度。
```
Stac(0, 1) 1`1`2`2`3`3`2-
Stac(1/2, 0) 1122332-
```

## 跟踪记号 ((Tracing Notation))

曲谱中有时会出现一个音重复很多次，或者是多个音来回重复等情况。为了更好地应对这些情况，我们提供了跟踪记号`%`来表示向前数第 n 个音的音高。

- `%`仅仅会复制所在音符的音高，不会复制相应音符的时值和音量。
- 由多个音组成的和弦在计数是只看作一个，休止符不会被计数。
- 由连音线相连的两个音或和弦，如果他们音高相同，则在计数时只看作一个。
- 上述 n 的值默认为 1，可以由 [../Ammonia/Trace] 函数进行更改。

### 基本范例

用跟踪记号来表达《Numb》的副歌部分的第一句：
```
(1=F)(120) [6o1#'].%_%[5o2'][6o1']%_%_%[7o4'][5o3']
```

用 [../Ammonia/Trace] 函数实现隔一个音复制，参考《佐渡の二ッ岩》前奏：
```
Trace(2) Dur(1) Oct(-1)
7,4#%%37%%|7,4#%%37%%|25%%51'%%|25%%1#4#14|
```

## 宏定义音高 ((Macro Pitch))


## 参见

